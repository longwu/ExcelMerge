<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:ExcelMerge">

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="Gray" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="Gray" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource ButtonBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource WindowForeground}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid SnapsToDevicePixels="True">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="4">
                            <Grid>
                                <Border Background="#19000000" CornerRadius="4"/>
                                <Border Background="{TemplateBinding Background}" CornerRadius="4" Margin="0,0,0,2"/>
                                <ContentPresenter x:Name="contentPresenter" SnapsToDevicePixels="True" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="0.8"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--button-->
    <Style x:Key="ButtonMainMiniStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource MainWindowTitleForeground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="Transparent">
                        <Rectangle x:Name="el" Fill="{DynamicResource MainWindowTitleForeground}" Visibility="Hidden" Opacity="0.3"/>
                        <Path x:Name="path" Data="{DynamicResource MiniGeometry}" Width="11" Height="2" Fill="{DynamicResource MainWindowTitleForeground}" Margin="0,4,0,0" Stretch="Uniform"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Visibility" TargetName="el" Value="Visible"/>
                            <Setter Property="Fill" TargetName="path" Value="#FFFFFFFF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonMainCloseStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource MainWindowTitleForeground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="Transparent">
                        <Rectangle x:Name="el" Fill="{DynamicResource ButtonCloseMouseOverBackground}" Visibility="Hidden"/>
                        <Path x:Name="path" Data="{DynamicResource CloseGeometry}" Width="11" Height="8" Fill="{DynamicResource MainWindowTitleForeground}" Stretch="Uniform"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Visibility" TargetName="el" Value="Visible"/>
                            <Setter Property="Fill" TargetName="path" Value="#FFFFFFFF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#439467"/>
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid SnapsToDevicePixels="True">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="4">
                            <Grid>
                                <Border Background="#19000000" CornerRadius="4"/>
                                <ContentPresenter x:Name="contentPresenter" SnapsToDevicePixels="True" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="0.8"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--button-->


    <Style x:Key="ButtonWinCloseStyle" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="#01FFFFFF">
                        <Rectangle x:Name="el" Fill="{DynamicResource ButtonCloseMouseOverBackground}" Visibility="Hidden" />
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="el" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Window -->
    <Style x:Key="WindowStyle" TargetType="{x:Type Window}">
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid Background="{DynamicResource WindowBackground}" Margin="5">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="36" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" Background="{DynamicResource WindowTitleBackground}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="24"/>
                                    <ColumnDefinition Width="24"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Text="{TemplateBinding Title}" Margin="12,0,0,0" TextTrimming="CharacterEllipsis" Foreground="{DynamicResource WindowTitleForeground}" VerticalAlignment="Center" />
                                <Button x:Name="btnMini" Grid.Column="1" Width="24" Height="24" VerticalAlignment="Top" Style="{DynamicResource ButtonMainMiniStyle}" Command="{x:Static local:WindowCommands.MiniCommand}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}">
                                    <Path Data="{DynamicResource MiniGeometry}" Width="11" Height="2" Fill="{DynamicResource WindowTitleForeground}" Margin="0,4,0,0" Stretch="Uniform"/>
                                </Button>
                                <Button x:Name="btnClose" Grid.Column="2" VerticalAlignment="Top" Width="24" Height="24" Style="{DynamicResource ButtonWinCloseStyle}" Command="{x:Static local:WindowCommands.CloseCommand}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}}}">
                                    <Path Data="{DynamicResource CloseGeometry}" Height="11" Width="11" Fill="{DynamicResource WindowTitleForeground}" Stretch="Uniform"/>
                                </Button>
                            </Grid>
                        </Border>
                        <AdornerDecorator Grid.Row="1">
                            <ContentPresenter />
                        </AdornerDecorator>
                        <Grid.Effect>
                            <DropShadowEffect BlurRadius="8" Direction="270" ShadowDepth="0" Color="Black" Opacity="0.5"/>
                        </Grid.Effect>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WindowStyle2" TargetType="{x:Type Window}">
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid Background="{DynamicResource WindowBackground}" Margin="5">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="36" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" Background="{DynamicResource WindowTitleBackground}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="24"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Text="{TemplateBinding Title}" Margin="12,0,0,0" TextTrimming="CharacterEllipsis" Foreground="{DynamicResource WindowTitleForeground}" VerticalAlignment="Center" />
                                <Button x:Name="btnClose" Grid.Column="1" VerticalAlignment="Top" Width="24" Height="24" Style="{DynamicResource ButtonWinCloseStyle}" Command="{x:Static local:WindowCommands.CloseCommand}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}}}">
                                    <Path Data="{DynamicResource CloseGeometry}" Height="11" Width="11" Fill="{DynamicResource WindowTitleForeground}" Stretch="Uniform"/>
                                </Button>
                            </Grid>
                        </Border>
                        <AdornerDecorator Grid.Row="1">
                            <ContentPresenter />
                        </AdornerDecorator>
                        <Grid.Effect>
                            <DropShadowEffect BlurRadius="8" Direction="270" ShadowDepth="0" Color="Black" Opacity="0.5"/>
                        </Grid.Effect>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ProgressBarTransferStyle" TargetType="{x:Type ProgressBar}">
        <Setter Property="Width" Value="300"/>
        <Setter Property="Height" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot" SnapsToDevicePixels="true">
                        <Border x:Name="PART_Track" Background="#ffdfe3e9" CornerRadius="5" SnapsToDevicePixels="True">
                            <Border.Clip>
                                <RectangleGeometry RadiusX="5" RadiusY="5" Rect="0,0,300,10"/>
                            </Border.Clip>
                            <Border x:Name="PART_Indicator" HorizontalAlignment="Left" SnapsToDevicePixels="True" Background="#FF73bd13"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true"/>
                        <Trigger Property="IsIndeterminate" Value="false"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>